import basic;

// ActionCellData

table ActionCellData {
    action: Bytes,
    params: Bytes,
}

// StateCellData

table StateCellData {
    reserved_account_root: Hash,
    // lock script of working keeper who aggregate the votes
    price_configs: PriceConfigList,
    // available char sets for account
    char_sets: CharSet,
    // the minimum ttl of record
    min_ttl: Uint32,
    // the closing limit of primary market auction(seconds)
    closing_limit_of_primary_market_auction: Uint32,
    // the closing limit of secondary market auction(seconds)
    closing_limit_of_secondary_market_auction: Uint32,
}

vector PriceConfigList <PriceConfig>;

table PriceConfig {
  length: Uint8,
  new: Uint64,
  renew: Uint64,
}

table CharSet {
    emoji: Hash,
    en: Hash,
    zh: Hash,
}

// RefCellData

table RefCellData {
    account_id: Hash,
}

// AccountCellData

table AccountCellData {
    owner_cell: OutPoint,
    manager_cell: OutPoint,
    account: Bytes,
    registered_at: Timestamp,
    expired_at: Timestamp,
    records: Records,
}

table Record {
    record_type: Bytes,
    record_label: Bytes,
    record_value: Bytes,
    record_ttl: Uint32,
}

vector Records <Record>;

// RegisterCellData

table RegisterCellData {
    account: Bytes,
    pubkey_hash: HashOpt,
    lock_script: ScriptOpt,
}

// OnSaleCell

table OnSaleCellData {
    owner_cell: OutPoint,
    manager_cell: OutPoint,
    account: Bytes,
    registered_at: Timestamp,
    expired_at: Timestamp,
    // this is the price of AccountCell
    price: Uint64,
}

// BiddingCell

table BiddingCellData {
    owner_cell: OutPoint,
    manager_cell: OutPoint,
    account: Bytes,
    registered_at: Timestamp,
    expired_at: Timestamp,
    market_type: Uint8, // market type, 0x01 for primaryï¼Œ0x02 for secondary
    starting_price: Uint64, // starting bidding price
    current_price: Uint64, // current bidding price
    current_user: ScriptOpt, // latest bidder's lock script
}
